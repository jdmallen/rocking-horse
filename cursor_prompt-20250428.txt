Create the frontend for a website for a community theatre company called Rocking Horse Productions.

Please ensure the following:
- Uses Vite for launch
- Mobile-first design (i.e. the primary viewport is mobile, and all responsive viewports up to and including an XL desktop one are defined in media queries)
- Uses Vue.js v3 for framework
- Header and footer, along with any reusable components, are broken out into Vue components and stored appropriately
- Uses Typescript
- Uses CSS for styles
- The color maroon is used in some of the branding
- Leaves a placeholder for a white rocking horse logo

The site should have these sections, navigable via nav:
- Shows: a page dedicated to the current season of shows
- Contribute: a page where patrons can learn how to become members, either as individual members at different levels of contributions or as corporate members representing a business. This is also the page where Audition information would be posted.
- Members: those who contribute financially should be featured on this page.
- Gallery: a page showcasing all the past productions of Rocking Horse over the last 20 years (4 shows per season). This is a lot to show on one page, so be creative with how the shows can be represented. Each show would have its own photo album presented in a gallery view, also potentially with a video. Perhaps an accordion list, somehow separated by season? Each season spans 2 years, so the current season is 2024-2025.
- About Us: this is where we can show off some regular crew and committee members, as well as some history of Rocking Horse.
- Tickets: this should be a call to action that takes patron to buy tickets for the current show.

Additionally:
- The footer should have a form to sign up for the email newsletter, as well as links to socials.
- The home page should have a hero image at the top for the current season or show, and below that have a paginated news blog, with news of upcoming shows and auditions. 
- The theme should be that of community theatre, but modern.
- There should be an option to switch between light and dark modes via pure CSS (though the button to do so can use some TS).
- Data will eventually pulled from an API hosted by DirectUs (separate project), so ensure there's a client class or file used to make these calls to the API. In the meantime, the client can supply mock/dummy data to the calling components.

